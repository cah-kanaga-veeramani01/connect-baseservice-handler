{
	"info": {
		"_postman_id": "6039cb48-0074-496e-9a49-12cf084769aa",
		"name": "BaseServiceHandler",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18100381"
	},
	"item": [
		{
			"name": "GetCookie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.cookies.get(\"AWSALB\");",
							"pm.collectionVariables.set(\"cookie\",data);",
							"",
							"pm.test(\"Display the cookie\",function(){",
							"    console.log(data);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "test.automation",
							"type": "text"
						},
						{
							"key": "password",
							"value": "LeguvJRw5vcd6LSA5Rmv!",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/internal/index.cfm?event=login",
					"host": [
						"{{url}}"
					],
					"path": [
						"internal",
						"index.cfm"
					],
					"query": [
						{
							"key": "event",
							"value": "login"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetCsrfToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var value = pm.cookies.get(\"XSRF-TOKEN\");",
							"pm.collectionVariables.set(\"xsrf\",value);",
							"",
							"pm.test(\"Display the XSRF-TOKEN\",function(){",
							"    console.log(value);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "{{cookie}}",
						"type": "text"
					},
					{
						"key": "Referer",
						"value": "{{referer}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/service-config-handler/csrf",
					"host": [
						"{{url}}"
					],
					"path": [
						"service-config-handler",
						"csrf"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAllServiceList",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json(); ",
							"",
							"pm.test(\"Validate status code 200\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"Validate of total number of services\", function () {",
							"    const services=jsonData.totalServices;",
							"    pm.expect(jsonData.totalServices).is.to.equal(services); ",
							"})",
							"",
							"pm.test(\"Validate of service ID\", function () {",
							"    const servid=jsonData.services[0].serviceid;",
							"    pm.expect(jsonData.services[0].serviceid).is.to.equal(servid);  ",
							"})",
							"",
							"pm.test(\"Validate of service name\", function () {",
							"    const servname=jsonData.services[0].servicename;",
							"    pm.expect(jsonData.services[0].servicename).is.to.equal(servname);  ",
							"})",
							"",
							"pm.test(\"Validate of service type\", function () {",
							"    const servtype=jsonData.services[0].servicetype;",
							"    pm.expect(jsonData.services[0].servicetype).is.to.equal(servtype);  ",
							"})",
							"",
							"",
							"pm.test(\"Validate of legacytipDetailID\", function () {",
							"    const legtipdetailID=jsonData.services[0].legacytipdetailid;",
							"    pm.expect(jsonData.services[0].legacytipdetailid).is.to.equal(legtipdetailID);  ",
							"})",
							"",
							"pm.test(\"Validate of  status\", function () {",
							"    const status=jsonData.services[0].status;",
							"    pm.expect(jsonData.services[0].status).is.to.equal(status);  ",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "{{cookie}}",
						"type": "text"
					},
					{
						"key": "Referer",
						"value": "{{referer}}",
						"type": "text"
					},
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{xsrf}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/service-config-handler/service/internal/list",
					"host": [
						"{{url}}"
					],
					"path": [
						"service-config-handler",
						"service",
						"internal",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUnmappedModules",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json(); ",
							"",
							"pm.test(\"Validate status code 200\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"Validate of service ID\", function () {",
							"    const servID=jsonData.serviceID;",
							"    pm.expect(jsonData.serviceID).is.to.equal(servID);  ",
							"})",
							"",
							"pm.test(\"Validate of global service version\", function () {",
							"    const globalSerVer=jsonData.globalServiceVersion;",
							"    pm.expect(jsonData.globalServiceVersion).is.to.equal(globalSerVer);  ",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "{{cookie}}",
						"type": "text"
					},
					{
						"key": "Referer",
						"value": "{{referer}}",
						"type": "text"
					},
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{xsrf}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/service-config-handler/service/internal/unmappedModules?serviceID=213&globalServiceVersion=2",
					"host": [
						"{{url}}"
					],
					"path": [
						"service-config-handler",
						"service",
						"internal",
						"unmappedModules"
					],
					"query": [
						{
							"key": "serviceID",
							"value": "213"
						},
						{
							"key": "globalServiceVersion",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetServiceDetails",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json(); ",
							"",
							"pm.test(\"Validate status code 200\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"Validate of service ID\", function () {",
							"    const servID=jsonData.serviceID;",
							"    pm.expect(jsonData.serviceID).is.to.equal(servID);  ",
							"})",
							"",
							"pm.test(\"Validate of active Version\", function () {",
							"    const activeVer=jsonData.activeVersion;",
							"    pm.expect(jsonData.activeVersion).is.to.equal(activeVer);  ",
							"})",
							"",
							"pm.test(\"Validate of draft Version\", function () {",
							"    const draftVer=jsonData.draftVersion;",
							"    pm.expect(jsonData.draftVersion).is.to.equal(draftVer);  ",
							"})",
							"",
							"pm.test(\"Validate of service name\", function () {",
							"    const servName=jsonData.serviceName;",
							"    pm.expect(jsonData.serviceName).is.to.equal(servName);  ",
							"})",
							"",
							"pm.test(\"Validate of service type\", function () {",
							"    const servType=jsonData.serviceType;",
							"    pm.expect(jsonData.serviceType).is.to.equal(servType);  ",
							"})",
							"",
							"pm.test(\"Validate of legacytipDetailID\", function () {",
							"    const legtipdetailID=jsonData.legacytipdetailid;",
							"    pm.expect(jsonData.legacytipdetailid).is.to.equal(legtipdetailID);  ",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "{{cookie}}",
						"type": "text"
					},
					{
						"key": "Referer",
						"value": "{{referer}}",
						"type": "text"
					},
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{xsrf}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/service-config-handler/service/internal/details?serviceID=213",
					"host": [
						"{{url}}"
					],
					"path": [
						"service-config-handler",
						"service",
						"internal",
						"details"
					],
					"query": [
						{
							"key": "serviceID",
							"value": "213"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetActiveServiceList",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json(); ",
							"",
							"pm.test(\"Validate status code 200\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"Validate of service ID\", function () {",
							"    const servID=jsonData.serviceID;",
							"    pm.expect(jsonData.serviceID).is.to.equal(servID);  ",
							"})",
							"",
							"pm.test(\"Validate of service type\", function () {",
							"    const servType=jsonData.serviceType;",
							"    pm.expect(jsonData.serviceType).is.to.equal(servType);  ",
							"})",
							"",
							"pm.test(\"Validate of legacyTIPDetail ID\", function () {",
							"    const legacyTIPDetail=jsonData.legacyTIPDetailID;",
							"    pm.expect(jsonData.legacyTIPDetailID).is.to.equal(legacyTIPDetail);  ",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "{{cookie}}",
						"type": "text"
					},
					{
						"key": "Referer",
						"value": "{{referer}}",
						"type": "text"
					},
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{xsrf}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/service-config-handler/service/internal/activeServices",
					"host": [
						"{{url}}"
					],
					"path": [
						"service-config-handler",
						"service",
						"internal",
						"activeServices"
					]
				}
			},
			"response": []
		},
		{
			"name": "ScheduleService",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json(); ",
							"",
							"pm.test(\"Validate status code 200\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"Validate of service ID\", function () {",
							"    const servID=jsonData.serviceID;",
							"    pm.expect(jsonData.serviceID).is.to.equal(servID);  ",
							"})",
							"",
							"pm.test(\"Validate of legacyTIPDetail ID\", function () {",
							"    const legacyTIPDetail=jsonData.legacyTIPDetailID;",
							"    pm.expect(jsonData.legacyTIPDetailID).is.to.equal(legacyTIPDetail);  ",
							"})",
							"",
							"pm.test(\"Validate of globalservice version\", function () {",
							"    const globalservicever=jsonData.globalServiceVersion;",
							"    pm.expect(jsonData.globalServiceVersion).is.to.equal(globalservicever);  ",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "{{cookie}}",
						"type": "text"
					},
					{
						"key": "Referer",
						"value": "{{referer}}",
						"type": "text"
					},
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{xsrf}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"serviceID\":213,\"globalServiceVersion\":3,\"startDate\":\"2023-08-30\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/service-config-handler/service/internal/schedule",
					"host": [
						"{{url}}"
					],
					"path": [
						"service-config-handler",
						"service",
						"internal",
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Updatedraft",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json(); ",
							"",
							"pm.test(\"Validate status code 200\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"Validate of service ID\", function () {",
							"    const servID=jsonData.serviceID;",
							"    pm.expect(jsonData.serviceID).is.to.equal(servID);  ",
							"})",
							"",
							"pm.test(\"Validate of legacyTIPDetail ID\", function () {",
							"    const legacyTIPDetail=jsonData.legacyTIPDetailID;",
							"    pm.expect(jsonData.legacyTIPDetailID).is.to.equal(legacyTIPDetail);  ",
							"})",
							"",
							"pm.test(\"Validate of globalservice version\", function () {",
							"    const globalservicever=jsonData.globalServiceVersion;",
							"    pm.expect(jsonData.globalServiceVersion).is.to.equal(globalservicever);  ",
							"})",
							"",
							"pm.test(\"Validate of service Type\", function () {",
							"    const servtype=jsonData.serviceType;",
							"    pm.expect(jsonData.serviceType).is.to.equal(servtype);  ",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Cookie",
						"value": "{{cookie}}",
						"type": "text"
					},
					{
						"key": "Referer",
						"value": "{{referer}}",
						"type": "text"
					},
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{xsrf}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"serviceID\": 213\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/service-config-handler/service/internal/draft",
					"host": [
						"{{url}}"
					],
					"path": [
						"service-config-handler",
						"service",
						"internal",
						"draft"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateServicemodules",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json(); ",
							"pm.globals.get(\"variable_key\");",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Validate of module version of services\", function () {",
							"    const moduleVer=jsonData.moduleVersion;",
							"    pm.expect(jsonData.moduleVersion).is.to.equal(moduleVer); ",
							"})",
							"",
							"pm.test(\"Validate of module id of services\", function () {",
							"    const modID=jsonData.moduleID;",
							"    pm.expect(jsonData.moduleID).is.to.equal(modID); ",
							"})",
							"",
							"pm.test(\"Validate of success message of services\", function () {",
							"    pm.expect(jsonData.message).is.to.equal(\"Module Configuration updated successfully\"); ",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Cookie",
						"value": "{{cookie}}",
						"type": "text"
					},
					{
						"key": "Referer",
						"value": "{{referer}}",
						"type": "text"
					},
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{xsrf}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"moduleVersion\": 1,\n  \"modules\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/service-config-handler/service/internal/213/modules",
					"host": [
						"{{url}}"
					],
					"path": [
						"service-config-handler",
						"service",
						"internal",
						"213",
						"modules"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTokenAccess",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"accessToken\",jsonData.access_token);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						},
						{
							"key": "scope",
							"value": "openid",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "MwKsvMPE6w7sukz5Cf4rqBQeKiX3GPsG8KI0TDVTFd4AhaIgOc",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "service-config",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://cc-keycloak-stage.apps.np1.fuseapps.io/auth/realms/connect/protocol/openid-connect/token",
					"protocol": "https",
					"host": [
						"cc-keycloak-stage",
						"apps",
						"np1",
						"fuseapps",
						"io"
					],
					"path": [
						"auth",
						"realms",
						"connect",
						"protocol",
						"openid-connect",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateExternalServicemodules",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json(); ",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Validate of module version of services\", function () {",
							"    const moduleVer=jsonData.moduleVersion;",
							"    pm.expect(jsonData.moduleVersion).is.to.equal(moduleVer); ",
							"})",
							"",
							"pm.test(\"Validate of module id of services\", function () {",
							"    const modID=jsonData.moduleID;",
							"    pm.expect(jsonData.moduleID).is.to.equal(modID); ",
							"})",
							"",
							"pm.test(\"Validate of success message of services\", function () {",
							"    pm.expect(jsonData.message).is.to.equal(\"Module Configuration updated successfully\"); ",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "accessToken",
						"value": "{{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"moduleVersion\": 3\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://service-config-handler.apps.np1.fuseapps.io/service/external/213/module/1",
					"protocol": "https",
					"host": [
						"service-config-handler",
						"apps",
						"np1",
						"fuseapps",
						"io"
					],
					"path": [
						"service",
						"external",
						"213",
						"module",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetExternalServiceAttributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json(); ",
							"",
							"pm.test(\"Validate status code 200\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"Validate of total number of services\", function () {",
							"    const services=jsonData.totalServices;",
							"    pm.expect(jsonData.totalServices).is.to.equal(services); ",
							"})",
							"",
							"pm.test(\"Validate of service ID\", function () {",
							"    const servid=jsonData.serviceid;",
							"    pm.expect(jsonData.serviceid).is.to.equal(servid);  ",
							"})",
							"",
							"pm.test(\"Validate of legacyTIPDetailID\", function () {",
							"    const legtipdetailID=jsonData.legacyTIPDetailID;",
							"    pm.expect(jsonData.legacyTIPDetailID).is.to.equal(legtipdetailID);  ",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"key": "accesstoken",
						"value": "{{accessToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://service-config-handler.apps.np1.fuseapps.io/service/external/attributes?serviceID=213&legacyTIPDetailID=1865&globalServiceVersion=1",
					"protocol": "https",
					"host": [
						"service-config-handler",
						"apps",
						"np1",
						"fuseapps",
						"io"
					],
					"path": [
						"service",
						"external",
						"attributes"
					],
					"query": [
						{
							"key": "serviceID",
							"value": "213"
						},
						{
							"key": "legacyTIPDetailID",
							"value": "1865"
						},
						{
							"key": "globalServiceVersion",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetExternalServiceDetails",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json(); ",
							"",
							"pm.test(\"Validate status code 200\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"Validate of service ID\", function () {",
							"    const servid=jsonData.serviceid;",
							"    pm.expect(jsonData.serviceid).is.to.equal(servid);  ",
							"})",
							"",
							"pm.test(\"Validate of service Type\", function () {",
							"    const servtype=jsonData.serviceType;",
							"    pm.expect(jsonData.serviceType).is.to.equal(servtype);  ",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "accessToken",
						"value": "{{accessToken}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://service-config-handler.apps.np1.fuseapps.io/service/external/details?serviceID=213&legacyTIPDetailID=1865",
					"protocol": "https",
					"host": [
						"service-config-handler",
						"apps",
						"np1",
						"fuseapps",
						"io"
					],
					"path": [
						"service",
						"external",
						"details"
					],
					"query": [
						{
							"key": "serviceID",
							"value": "213"
						},
						{
							"key": "legacyTIPDetailID",
							"value": "1865"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://staging.outcomesmtm.com"
		},
		{
			"key": "cookie",
			"value": ""
		},
		{
			"key": "referer",
			"value": "https://staging.outcomesmtm.com/internal/index.cfm?event=programConfig.programConfig"
		},
		{
			"key": "xsrf",
			"value": ""
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		}
	]
}